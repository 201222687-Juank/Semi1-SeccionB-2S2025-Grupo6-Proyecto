'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "translate",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class TranslateClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultTranslateHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class TranslateServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, TranslateServiceException.prototype);
    }
}

class ConcurrentModificationException extends TranslateServiceException {
    name = "ConcurrentModificationException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
class ConflictException extends TranslateServiceException {
    name = "ConflictException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
const EncryptionKeyType = {
    KMS: "KMS",
};
const ParallelDataFormat = {
    CSV: "CSV",
    TMX: "TMX",
    TSV: "TSV",
};
const ParallelDataStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
class InternalServerException extends TranslateServiceException {
    name = "InternalServerException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
class InvalidParameterValueException extends TranslateServiceException {
    name = "InvalidParameterValueException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
        this.Message = opts.Message;
    }
}
class InvalidRequestException extends TranslateServiceException {
    name = "InvalidRequestException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
class LimitExceededException extends TranslateServiceException {
    name = "LimitExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
class TooManyRequestsException extends TranslateServiceException {
    name = "TooManyRequestsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
class TooManyTagsException extends TranslateServiceException {
    name = "TooManyTagsException";
    $fault = "client";
    ResourceArn;
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.ResourceArn = opts.ResourceArn;
    }
}
class ResourceNotFoundException extends TranslateServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const JobStatus = {
    COMPLETED: "COMPLETED",
    COMPLETED_WITH_ERROR: "COMPLETED_WITH_ERROR",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    SUBMITTED: "SUBMITTED",
};
const Brevity = {
    ON: "ON",
};
const Formality = {
    FORMAL: "FORMAL",
    INFORMAL: "INFORMAL",
};
const Profanity = {
    MASK: "MASK",
};
const TerminologyDataFormat = {
    CSV: "CSV",
    TMX: "TMX",
    TSV: "TSV",
};
const Directionality = {
    MULTI: "MULTI",
    UNI: "UNI",
};
const MergeStrategy = {
    OVERWRITE: "OVERWRITE",
};
const DisplayLanguageCode = {
    DE: "de",
    EN: "en",
    ES: "es",
    FR: "fr",
    IT: "it",
    JA: "ja",
    KO: "ko",
    PT: "pt",
    ZH: "zh",
    ZH_TW: "zh-TW",
};
class UnsupportedDisplayLanguageCodeException extends TranslateServiceException {
    name = "UnsupportedDisplayLanguageCodeException";
    $fault = "client";
    Message;
    DisplayLanguageCode;
    constructor(opts) {
        super({
            name: "UnsupportedDisplayLanguageCodeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedDisplayLanguageCodeException.prototype);
        this.Message = opts.Message;
        this.DisplayLanguageCode = opts.DisplayLanguageCode;
    }
}
class InvalidFilterException extends TranslateServiceException {
    name = "InvalidFilterException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidFilterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidFilterException.prototype);
        this.Message = opts.Message;
    }
}
class UnsupportedLanguagePairException extends TranslateServiceException {
    name = "UnsupportedLanguagePairException";
    $fault = "client";
    Message;
    SourceLanguageCode;
    TargetLanguageCode;
    constructor(opts) {
        super({
            name: "UnsupportedLanguagePairException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedLanguagePairException.prototype);
        this.Message = opts.Message;
        this.SourceLanguageCode = opts.SourceLanguageCode;
        this.TargetLanguageCode = opts.TargetLanguageCode;
    }
}
class ServiceUnavailableException extends TranslateServiceException {
    name = "ServiceUnavailableException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
class DetectedLanguageLowConfidenceException extends TranslateServiceException {
    name = "DetectedLanguageLowConfidenceException";
    $fault = "client";
    Message;
    DetectedLanguageCode;
    constructor(opts) {
        super({
            name: "DetectedLanguageLowConfidenceException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DetectedLanguageLowConfidenceException.prototype);
        this.Message = opts.Message;
        this.DetectedLanguageCode = opts.DetectedLanguageCode;
    }
}
class TextSizeLimitExceededException extends TranslateServiceException {
    name = "TextSizeLimitExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TextSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TextSizeLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
const TerminologyDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.File && { File: smithyClient.SENSITIVE_STRING }),
});
const ImportTerminologyRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TerminologyData && { TerminologyData: TerminologyDataFilterSensitiveLog(obj.TerminologyData) }),
});
const DocumentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithyClient.SENSITIVE_STRING }),
});
const TranslateDocumentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Document && { Document: DocumentFilterSensitiveLog(obj.Document) }),
});
const TranslatedDocumentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithyClient.SENSITIVE_STRING }),
});
const TranslateDocumentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TranslatedDocument && { TranslatedDocument: TranslatedDocumentFilterSensitiveLog(obj.TranslatedDocument) }),
});

const se_CreateParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("CreateParallelData");
    let body;
    body = JSON.stringify(se_CreateParallelDataRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteParallelData");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTerminologyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTerminology");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTextTranslationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTextTranslationJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetParallelData");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTerminologyCommand = async (input, context) => {
    const headers = sharedHeaders("GetTerminology");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportTerminologyCommand = async (input, context) => {
    const headers = sharedHeaders("ImportTerminology");
    let body;
    body = JSON.stringify(se_ImportTerminologyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListLanguagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListLanguages");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("ListParallelData");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTerminologiesCommand = async (input, context) => {
    const headers = sharedHeaders("ListTerminologies");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTextTranslationJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTextTranslationJobs");
    let body;
    body = JSON.stringify(se_ListTextTranslationJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartTextTranslationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartTextTranslationJob");
    let body;
    body = JSON.stringify(se_StartTextTranslationJobRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopTextTranslationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopTextTranslationJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TranslateDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("TranslateDocument");
    let body;
    body = JSON.stringify(se_TranslateDocumentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TranslateTextCommand = async (input, context) => {
    const headers = sharedHeaders("TranslateText");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateParallelData");
    let body;
    body = JSON.stringify(se_UpdateParallelDataRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_CreateParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTerminologyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DescribeTextTranslationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTextTranslationJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetParallelDataResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTerminologyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetTerminologyResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportTerminologyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ImportTerminologyResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListLanguagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListParallelDataResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTerminologiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListTerminologiesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTextTranslationJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListTextTranslationJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartTextTranslationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopTextTranslationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TranslateDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_TranslateDocumentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TranslateTextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateParallelDataResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.translate#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.translate#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput);
        case "InvalidRequestException":
        case "com.amazonaws.translate#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.translate#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput);
        case "TooManyTagsException":
        case "com.amazonaws.translate#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "UnsupportedDisplayLanguageCodeException":
        case "com.amazonaws.translate#UnsupportedDisplayLanguageCodeException":
            throw await de_UnsupportedDisplayLanguageCodeExceptionRes(parsedOutput);
        case "InvalidFilterException":
        case "com.amazonaws.translate#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput);
        case "UnsupportedLanguagePairException":
        case "com.amazonaws.translate#UnsupportedLanguagePairException":
            throw await de_UnsupportedLanguagePairExceptionRes(parsedOutput);
        case "ServiceUnavailableException":
        case "com.amazonaws.translate#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput);
        case "DetectedLanguageLowConfidenceException":
        case "com.amazonaws.translate#DetectedLanguageLowConfidenceException":
            throw await de_DetectedLanguageLowConfidenceExceptionRes(parsedOutput);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.translate#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DetectedLanguageLowConfidenceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new DetectedLanguageLowConfidenceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidFilterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidFilterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TextSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TextSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedDisplayLanguageCodeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedDisplayLanguageCodeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedLanguagePairExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedLanguagePairException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_CreateParallelDataRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Description: [],
        EncryptionKey: smithyClient._json,
        Name: [],
        ParallelDataConfig: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_Document = (input, context) => {
    return smithyClient.take(input, {
        Content: context.base64Encoder,
        ContentType: [],
    });
};
const se_ImportTerminologyRequest = (input, context) => {
    return smithyClient.take(input, {
        Description: [],
        EncryptionKey: smithyClient._json,
        MergeStrategy: [],
        Name: [],
        Tags: smithyClient._json,
        TerminologyData: (_) => se_TerminologyData(_, context),
    });
};
const se_ListTextTranslationJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        Filter: (_) => se_TextTranslationJobFilter(_),
        MaxResults: [],
        NextToken: [],
    });
};
const se_StartTextTranslationJobRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        DataAccessRoleArn: [],
        InputDataConfig: smithyClient._json,
        JobName: [],
        OutputDataConfig: smithyClient._json,
        ParallelDataNames: smithyClient._json,
        Settings: smithyClient._json,
        SourceLanguageCode: [],
        TargetLanguageCodes: smithyClient._json,
        TerminologyNames: smithyClient._json,
    });
};
const se_TerminologyData = (input, context) => {
    return smithyClient.take(input, {
        Directionality: [],
        File: context.base64Encoder,
        Format: [],
    });
};
const se_TextTranslationJobFilter = (input, context) => {
    return smithyClient.take(input, {
        JobName: [],
        JobStatus: [],
        SubmittedAfterTime: (_) => _.getTime() / 1_000,
        SubmittedBeforeTime: (_) => _.getTime() / 1_000,
    });
};
const se_TranslateDocumentRequest = (input, context) => {
    return smithyClient.take(input, {
        Document: (_) => se_Document(_, context),
        Settings: smithyClient._json,
        SourceLanguageCode: [],
        TargetLanguageCode: [],
        TerminologyNames: smithyClient._json,
    });
};
const se_UpdateParallelDataRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Description: [],
        Name: [],
        ParallelDataConfig: smithyClient._json,
    });
};
const de_DescribeTextTranslationJobResponse = (output, context) => {
    return smithyClient.take(output, {
        TextTranslationJobProperties: (_) => de_TextTranslationJobProperties(_),
    });
};
const de_GetParallelDataResponse = (output, context) => {
    return smithyClient.take(output, {
        AuxiliaryDataLocation: smithyClient._json,
        DataLocation: smithyClient._json,
        LatestUpdateAttemptAuxiliaryDataLocation: smithyClient._json,
        ParallelDataProperties: (_) => de_ParallelDataProperties(_),
    });
};
const de_GetTerminologyResponse = (output, context) => {
    return smithyClient.take(output, {
        AuxiliaryDataLocation: smithyClient._json,
        TerminologyDataLocation: smithyClient._json,
        TerminologyProperties: (_) => de_TerminologyProperties(_),
    });
};
const de_ImportTerminologyResponse = (output, context) => {
    return smithyClient.take(output, {
        AuxiliaryDataLocation: smithyClient._json,
        TerminologyProperties: (_) => de_TerminologyProperties(_),
    });
};
const de_ListParallelDataResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        ParallelDataPropertiesList: (_) => de_ParallelDataPropertiesList(_),
    });
};
const de_ListTerminologiesResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        TerminologyPropertiesList: (_) => de_TerminologyPropertiesList(_),
    });
};
const de_ListTextTranslationJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        TextTranslationJobPropertiesList: (_) => de_TextTranslationJobPropertiesList(_),
    });
};
const de_ParallelDataProperties = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        EncryptionKey: smithyClient._json,
        FailedRecordCount: smithyClient.expectLong,
        ImportedDataSize: smithyClient.expectLong,
        ImportedRecordCount: smithyClient.expectLong,
        LastUpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LatestUpdateAttemptAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LatestUpdateAttemptStatus: smithyClient.expectString,
        Message: smithyClient.expectString,
        Name: smithyClient.expectString,
        ParallelDataConfig: smithyClient._json,
        SkippedRecordCount: smithyClient.expectLong,
        SourceLanguageCode: smithyClient.expectString,
        Status: smithyClient.expectString,
        TargetLanguageCodes: smithyClient._json,
    });
};
const de_ParallelDataPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParallelDataProperties(entry);
    });
    return retVal;
};
const de_TerminologyProperties = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        Directionality: smithyClient.expectString,
        EncryptionKey: smithyClient._json,
        Format: smithyClient.expectString,
        LastUpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Message: smithyClient.expectString,
        Name: smithyClient.expectString,
        SizeBytes: smithyClient.expectInt32,
        SkippedTermCount: smithyClient.expectInt32,
        SourceLanguageCode: smithyClient.expectString,
        TargetLanguageCodes: smithyClient._json,
        TermCount: smithyClient.expectInt32,
    });
};
const de_TerminologyPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TerminologyProperties(entry);
    });
    return retVal;
};
const de_TextTranslationJobProperties = (output, context) => {
    return smithyClient.take(output, {
        DataAccessRoleArn: smithyClient.expectString,
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InputDataConfig: smithyClient._json,
        JobDetails: smithyClient._json,
        JobId: smithyClient.expectString,
        JobName: smithyClient.expectString,
        JobStatus: smithyClient.expectString,
        Message: smithyClient.expectString,
        OutputDataConfig: smithyClient._json,
        ParallelDataNames: smithyClient._json,
        Settings: smithyClient._json,
        SourceLanguageCode: smithyClient.expectString,
        SubmittedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TargetLanguageCodes: smithyClient._json,
        TerminologyNames: smithyClient._json,
    });
};
const de_TextTranslationJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TextTranslationJobProperties(entry);
    });
    return retVal;
};
const de_TranslatedDocument = (output, context) => {
    return smithyClient.take(output, {
        Content: context.base64Decoder,
    });
};
const de_TranslateDocumentResponse = (output, context) => {
    return smithyClient.take(output, {
        AppliedSettings: smithyClient._json,
        AppliedTerminologies: smithyClient._json,
        SourceLanguageCode: smithyClient.expectString,
        TargetLanguageCode: smithyClient.expectString,
        TranslatedDocument: (_) => de_TranslatedDocument(_, context),
    });
};
const de_UpdateParallelDataResponse = (output, context) => {
    return smithyClient.take(output, {
        LatestUpdateAttemptAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LatestUpdateAttemptStatus: smithyClient.expectString,
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(TranslateServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSShineFrontendService_20170701.${operation}`,
    };
}

class CreateParallelDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "CreateParallelData", {})
    .n("TranslateClient", "CreateParallelDataCommand")
    .f(void 0, void 0)
    .ser(se_CreateParallelDataCommand)
    .de(de_CreateParallelDataCommand)
    .build() {
}

class DeleteParallelDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "DeleteParallelData", {})
    .n("TranslateClient", "DeleteParallelDataCommand")
    .f(void 0, void 0)
    .ser(se_DeleteParallelDataCommand)
    .de(de_DeleteParallelDataCommand)
    .build() {
}

class DeleteTerminologyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "DeleteTerminology", {})
    .n("TranslateClient", "DeleteTerminologyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTerminologyCommand)
    .de(de_DeleteTerminologyCommand)
    .build() {
}

class DescribeTextTranslationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "DescribeTextTranslationJob", {})
    .n("TranslateClient", "DescribeTextTranslationJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTextTranslationJobCommand)
    .de(de_DescribeTextTranslationJobCommand)
    .build() {
}

class GetParallelDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "GetParallelData", {})
    .n("TranslateClient", "GetParallelDataCommand")
    .f(void 0, void 0)
    .ser(se_GetParallelDataCommand)
    .de(de_GetParallelDataCommand)
    .build() {
}

class GetTerminologyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "GetTerminology", {})
    .n("TranslateClient", "GetTerminologyCommand")
    .f(void 0, void 0)
    .ser(se_GetTerminologyCommand)
    .de(de_GetTerminologyCommand)
    .build() {
}

class ImportTerminologyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "ImportTerminology", {})
    .n("TranslateClient", "ImportTerminologyCommand")
    .f(ImportTerminologyRequestFilterSensitiveLog, void 0)
    .ser(se_ImportTerminologyCommand)
    .de(de_ImportTerminologyCommand)
    .build() {
}

class ListLanguagesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "ListLanguages", {})
    .n("TranslateClient", "ListLanguagesCommand")
    .f(void 0, void 0)
    .ser(se_ListLanguagesCommand)
    .de(de_ListLanguagesCommand)
    .build() {
}

class ListParallelDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "ListParallelData", {})
    .n("TranslateClient", "ListParallelDataCommand")
    .f(void 0, void 0)
    .ser(se_ListParallelDataCommand)
    .de(de_ListParallelDataCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "ListTagsForResource", {})
    .n("TranslateClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListTerminologiesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "ListTerminologies", {})
    .n("TranslateClient", "ListTerminologiesCommand")
    .f(void 0, void 0)
    .ser(se_ListTerminologiesCommand)
    .de(de_ListTerminologiesCommand)
    .build() {
}

class ListTextTranslationJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "ListTextTranslationJobs", {})
    .n("TranslateClient", "ListTextTranslationJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListTextTranslationJobsCommand)
    .de(de_ListTextTranslationJobsCommand)
    .build() {
}

class StartTextTranslationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "StartTextTranslationJob", {})
    .n("TranslateClient", "StartTextTranslationJobCommand")
    .f(void 0, void 0)
    .ser(se_StartTextTranslationJobCommand)
    .de(de_StartTextTranslationJobCommand)
    .build() {
}

class StopTextTranslationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "StopTextTranslationJob", {})
    .n("TranslateClient", "StopTextTranslationJobCommand")
    .f(void 0, void 0)
    .ser(se_StopTextTranslationJobCommand)
    .de(de_StopTextTranslationJobCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "TagResource", {})
    .n("TranslateClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class TranslateDocumentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "TranslateDocument", {})
    .n("TranslateClient", "TranslateDocumentCommand")
    .f(TranslateDocumentRequestFilterSensitiveLog, TranslateDocumentResponseFilterSensitiveLog)
    .ser(se_TranslateDocumentCommand)
    .de(de_TranslateDocumentCommand)
    .build() {
}

class TranslateTextCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "TranslateText", {})
    .n("TranslateClient", "TranslateTextCommand")
    .f(void 0, void 0)
    .ser(se_TranslateTextCommand)
    .de(de_TranslateTextCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "UntagResource", {})
    .n("TranslateClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateParallelDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSShineFrontendService_20170701", "UpdateParallelData", {})
    .n("TranslateClient", "UpdateParallelDataCommand")
    .f(void 0, void 0)
    .ser(se_UpdateParallelDataCommand)
    .de(de_UpdateParallelDataCommand)
    .build() {
}

const commands = {
    CreateParallelDataCommand,
    DeleteParallelDataCommand,
    DeleteTerminologyCommand,
    DescribeTextTranslationJobCommand,
    GetParallelDataCommand,
    GetTerminologyCommand,
    ImportTerminologyCommand,
    ListLanguagesCommand,
    ListParallelDataCommand,
    ListTagsForResourceCommand,
    ListTerminologiesCommand,
    ListTextTranslationJobsCommand,
    StartTextTranslationJobCommand,
    StopTextTranslationJobCommand,
    TagResourceCommand,
    TranslateDocumentCommand,
    TranslateTextCommand,
    UntagResourceCommand,
    UpdateParallelDataCommand,
};
class Translate extends TranslateClient {
}
smithyClient.createAggregatedClient(commands, Translate);

const paginateListLanguages = core.createPaginator(TranslateClient, ListLanguagesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListParallelData = core.createPaginator(TranslateClient, ListParallelDataCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTerminologies = core.createPaginator(TranslateClient, ListTerminologiesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTextTranslationJobs = core.createPaginator(TranslateClient, ListTextTranslationJobsCommand, "NextToken", "NextToken", "MaxResults");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.Brevity = Brevity;
exports.ConcurrentModificationException = ConcurrentModificationException;
exports.ConflictException = ConflictException;
exports.CreateParallelDataCommand = CreateParallelDataCommand;
exports.DeleteParallelDataCommand = DeleteParallelDataCommand;
exports.DeleteTerminologyCommand = DeleteTerminologyCommand;
exports.DescribeTextTranslationJobCommand = DescribeTextTranslationJobCommand;
exports.DetectedLanguageLowConfidenceException = DetectedLanguageLowConfidenceException;
exports.Directionality = Directionality;
exports.DisplayLanguageCode = DisplayLanguageCode;
exports.DocumentFilterSensitiveLog = DocumentFilterSensitiveLog;
exports.EncryptionKeyType = EncryptionKeyType;
exports.Formality = Formality;
exports.GetParallelDataCommand = GetParallelDataCommand;
exports.GetTerminologyCommand = GetTerminologyCommand;
exports.ImportTerminologyCommand = ImportTerminologyCommand;
exports.ImportTerminologyRequestFilterSensitiveLog = ImportTerminologyRequestFilterSensitiveLog;
exports.InternalServerException = InternalServerException;
exports.InvalidFilterException = InvalidFilterException;
exports.InvalidParameterValueException = InvalidParameterValueException;
exports.InvalidRequestException = InvalidRequestException;
exports.JobStatus = JobStatus;
exports.LimitExceededException = LimitExceededException;
exports.ListLanguagesCommand = ListLanguagesCommand;
exports.ListParallelDataCommand = ListParallelDataCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListTerminologiesCommand = ListTerminologiesCommand;
exports.ListTextTranslationJobsCommand = ListTextTranslationJobsCommand;
exports.MergeStrategy = MergeStrategy;
exports.ParallelDataFormat = ParallelDataFormat;
exports.ParallelDataStatus = ParallelDataStatus;
exports.Profanity = Profanity;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ServiceUnavailableException = ServiceUnavailableException;
exports.StartTextTranslationJobCommand = StartTextTranslationJobCommand;
exports.StopTextTranslationJobCommand = StopTextTranslationJobCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.TerminologyDataFilterSensitiveLog = TerminologyDataFilterSensitiveLog;
exports.TerminologyDataFormat = TerminologyDataFormat;
exports.TextSizeLimitExceededException = TextSizeLimitExceededException;
exports.TooManyRequestsException = TooManyRequestsException;
exports.TooManyTagsException = TooManyTagsException;
exports.Translate = Translate;
exports.TranslateClient = TranslateClient;
exports.TranslateDocumentCommand = TranslateDocumentCommand;
exports.TranslateDocumentRequestFilterSensitiveLog = TranslateDocumentRequestFilterSensitiveLog;
exports.TranslateDocumentResponseFilterSensitiveLog = TranslateDocumentResponseFilterSensitiveLog;
exports.TranslateServiceException = TranslateServiceException;
exports.TranslateTextCommand = TranslateTextCommand;
exports.TranslatedDocumentFilterSensitiveLog = TranslatedDocumentFilterSensitiveLog;
exports.UnsupportedDisplayLanguageCodeException = UnsupportedDisplayLanguageCodeException;
exports.UnsupportedLanguagePairException = UnsupportedLanguagePairException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateParallelDataCommand = UpdateParallelDataCommand;
exports.paginateListLanguages = paginateListLanguages;
exports.paginateListParallelData = paginateListParallelData;
exports.paginateListTerminologies = paginateListTerminologies;
exports.paginateListTextTranslationJobs = paginateListTextTranslationJobs;
